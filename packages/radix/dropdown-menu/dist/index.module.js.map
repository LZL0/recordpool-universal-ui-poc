{"mappings":"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","sources":["./packages/react/dropdown-menu/src/DropdownMenu.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Platform, View, Modal } from 'react-native';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { createContext } from '@radix-ui/react-context';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\nimport { extendPrimitive } from '@radix-ui/react-primitive';\nimport * as MenuPrimitive from '@radix-ui/react-menu';\nimport { useId } from '@radix-ui/react-id';\nimport BottomSheet from '@gorhom/bottom-sheet';\n\nimport type * as Polymorphic from '@radix-ui/react-polymorphic';\n\n/* -------------------------------------------------------------------------------------------------\n * DropdownMenu\n * -----------------------------------------------------------------------------------------------*/\n\nconst DROPDOWN_MENU_NAME = 'DropdownMenu';\n\ntype DropdownMenuContextValue = {\n  triggerRef: React.RefObject<HTMLButtonElement>;\n  contentId: string;\n  open: boolean;\n  onOpenChange(open: boolean): void;\n  onOpenToggle(): void;\n};\n\nconst [DropdownMenuProvider, useDropdownMenuContext] = createContext<DropdownMenuContextValue>(\n  DROPDOWN_MENU_NAME\n);\n\ntype DropdownMenuOwnProps = {\n  open?: boolean;\n  defaultOpen?: boolean;\n  onOpenChange?(open: boolean): void;\n};\n\nconst DropdownMenu: React.FC<DropdownMenuOwnProps> = (props) => {\n  const { children, open: openProp, defaultOpen, onOpenChange } = props;\n  const triggerRef = React.useRef<HTMLButtonElement>(null);\n  const [open = false, setOpen] = useControllableState({\n    prop: openProp,\n    defaultProp: defaultOpen,\n    onChange: onOpenChange,\n  });\n\n  return (\n    <MenuPrimitive.Root open={open} onOpenChange={setOpen}>\n      <DropdownMenuProvider\n        triggerRef={triggerRef}\n        contentId={useId()}\n        open={open}\n        onOpenChange={setOpen}\n        onOpenToggle={React.useCallback(() => setOpen((prevOpen) => !prevOpen), [setOpen])}\n      >\n        {children}\n      </DropdownMenuProvider>\n    </MenuPrimitive.Root>\n  );\n};\n\nDropdownMenu.displayName = DROPDOWN_MENU_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DropdownMenuTrigger\n * -----------------------------------------------------------------------------------------------*/\n\nconst TRIGGER_NAME = 'DropdownMenuTrigger';\nconst TRIGGER_DEFAULT_TAG = Platform.OS === 'web' ? 'button' : View;\n\ntype DropdownMenuTriggerOwnProps = Omit<\n  Polymorphic.OwnProps<typeof MenuPrimitive.Anchor>,\n  'virtualRef'\n>;\ntype DropdownMenuTriggerPrimitive = Polymorphic.ForwardRefComponent<\n  typeof TRIGGER_DEFAULT_TAG,\n  DropdownMenuTriggerOwnProps\n>;\n\nconst DropdownMenuTrigger = React.forwardRef((props, forwardedRef) => {\n  const { as = TRIGGER_DEFAULT_TAG, ...triggerProps } = props;\n  const context = useDropdownMenuContext(TRIGGER_NAME);\n  const composedTriggerRef = useComposedRefs(forwardedRef, context.triggerRef);\n\n  return (\n    <MenuPrimitive.Anchor\n      type=\"button\"\n      aria-haspopup=\"menu\"\n      aria-expanded={context.open ? true : undefined}\n      aria-controls={context.open ? context.contentId : undefined}\n      data-state={context.open ? 'open' : 'closed'}\n      {...triggerProps}\n      as={as}\n      ref={composedTriggerRef}\n      onMouseDown={composeEventHandlers(props.onMouseDown, (event) => {\n        // only call handler if it's the left button (mousedown gets triggered by all mouse buttons)\n        // but not when the control key is pressed (avoiding MacOS right click)\n        if (event.button === 0 && event.ctrlKey === false) {\n          context.onOpenToggle();\n        }\n      })}\n      onKeyDown={composeEventHandlers(props.onKeyDown, (event: React.KeyboardEvent) => {\n        if ([' ', 'Enter', 'ArrowUp', 'ArrowDown'].includes(event.key)) {\n          event.preventDefault();\n          context.onOpenChange(true);\n        }\n      })}\n    />\n  );\n}) as DropdownMenuTriggerPrimitive;\n\nDropdownMenuTrigger.displayName = TRIGGER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DropdownMenuContent\n * -----------------------------------------------------------------------------------------------*/\n\nconst CONTENT_NAME = 'DropdownMenuContent';\n\ntype DropdownMenuContentOwnProps = Omit<\n  Polymorphic.OwnProps<typeof MenuPrimitive.Content>,\n  'trapFocus' | 'onOpenAutoFocus'\n>;\n\ntype DropdownMenuContentPrimitive = Polymorphic.ForwardRefComponent<\n  Polymorphic.IntrinsicElement<typeof MenuPrimitive.Content>,\n  DropdownMenuContentOwnProps\n>;\n\nconst DropdownMenuContent = React.forwardRef((props, forwardedRef) => {\n  const {\n    onCloseAutoFocus,\n    disableOutsidePointerEvents = true,\n    disableOutsideScroll = true,\n    portalled = true,\n    ...contentProps\n  } = props;\n  const context = useDropdownMenuContext(CONTENT_NAME);\n  const bottomSheetRef = React.useRef<BottomSheet>(null);\n  const handleSheetChanges = React.useCallback(\n    (index: number) => {\n      if (index === -1) {\n        context.onOpenChange(false);\n      }\n    },\n    [context]\n  );\n\n  if (Platform.OS === 'web') {\n    return (\n      <MenuPrimitive.Content\n        id={context.contentId}\n        {...contentProps}\n        ref={forwardedRef}\n        disableOutsidePointerEvents={disableOutsidePointerEvents}\n        disableOutsideScroll={disableOutsideScroll}\n        portalled={portalled}\n        style={{\n          ...props.style,\n          // re-namespace exposed content custom property\n          ['--radix-dropdown-menu-content-transform-origin' as any]: 'var(--radix-popper-transform-origin)',\n        }}\n        trapFocus\n        onCloseAutoFocus={composeEventHandlers(onCloseAutoFocus, (event) => {\n          event.preventDefault();\n          context.triggerRef.current?.focus();\n        })}\n        onPointerDownOutside={composeEventHandlers(\n          props.onPointerDownOutside,\n          (event) => {\n            const targetIsTrigger = context.triggerRef.current?.contains(\n              event.target as HTMLElement\n            );\n            // prevent dismissing when clicking the trigger\n            // as it's already setup to close, otherwise it would close and immediately open.\n            if (targetIsTrigger) event.preventDefault();\n          },\n          { checkForDefaultPrevented: false }\n        )}\n      />\n    );\n  }\n\n  return (\n    <View style={{ flex: 1 }}>\n      <Modal\n        animationType=\"none\"\n        transparent={true}\n        visible={context.open}\n        onRequestClose={() => {\n          context.onOpenChange(!context.open);\n        }}\n      >\n        <BottomSheet\n          {...contentProps}\n          ref={bottomSheetRef}\n          animateOnMount={true}\n          enablePanDownToClose={true}\n          onChange={handleSheetChanges}\n        />\n      </Modal>\n    </View>\n  );\n}) as DropdownMenuContentPrimitive;\n\nDropdownMenuContent.displayName = CONTENT_NAME;\n\n/* ---------------------------------------------------------------------------------------------- */\n\nconst DropdownMenuGroup = extendPrimitive(MenuPrimitive.Group, {\n  displayName: 'DropdownMenuGroup',\n});\nconst DropdownMenuLabel = extendPrimitive(MenuPrimitive.Label, {\n  displayName: 'DropdownMenuLabel',\n});\nconst DropdownMenuItem = extendPrimitive(MenuPrimitive.Item, { displayName: 'DropdownMenuItem' });\nconst DropdownMenuCheckboxItem = extendPrimitive(MenuPrimitive.CheckboxItem, {\n  displayName: 'DropdownMenuCheckboxItem',\n});\nconst DropdownMenuRadioGroup = extendPrimitive(MenuPrimitive.RadioGroup, {\n  displayName: 'DropdownMenuRadioGroup',\n});\nconst DropdownMenuRadioItem = extendPrimitive(MenuPrimitive.RadioItem, {\n  displayName: 'DropdownMenuRadioItem',\n});\nconst DropdownMenuItemIndicator = extendPrimitive(MenuPrimitive.ItemIndicator, {\n  displayName: 'DropdownMenuItemIndicator',\n});\nconst DropdownMenuSeparator = extendPrimitive(MenuPrimitive.Separator, {\n  displayName: 'DropdownMenuSeparator',\n});\nconst DropdownMenuArrow = extendPrimitive(MenuPrimitive.Arrow, {\n  displayName: 'DropdownMenuArrow',\n});\n\n/* -----------------------------------------------------------------------------------------------*/\n\nconst Root = DropdownMenu;\nconst Trigger = DropdownMenuTrigger;\nconst Content = DropdownMenuContent;\nconst Group = DropdownMenuGroup;\nconst Label = DropdownMenuLabel;\nconst Item = DropdownMenuItem;\nconst CheckboxItem = DropdownMenuCheckboxItem;\nconst RadioGroup = DropdownMenuRadioGroup;\nconst RadioItem = DropdownMenuRadioItem;\nconst ItemIndicator = DropdownMenuItemIndicator;\nconst Separator = DropdownMenuSeparator;\nconst Arrow = DropdownMenuArrow;\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuGroup,\n  DropdownMenuLabel,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioGroup,\n  DropdownMenuRadioItem,\n  DropdownMenuItemIndicator,\n  DropdownMenuSeparator,\n  DropdownMenuArrow,\n  //\n  Root,\n  Trigger,\n  Content,\n  Group,\n  Label,\n  Item,\n  CheckboxItem,\n  RadioGroup,\n  RadioItem,\n  ItemIndicator,\n  Separator,\n  Arrow,\n};\nexport type { DropdownMenuTriggerPrimitive, DropdownMenuContentPrimitive };\n"],"names":["DropdownMenuProvider","useDropdownMenuContext","createContext","DropdownMenu","props","children","open","openProp","defaultOpen","onOpenChange","triggerRef","React","useRef","setOpen","useControllableState","prop","defaultProp","onChange","_react","createElement","_radixUiReactMenu","Root","$c7ff2201b6eec7866a95d2679b05981$var$DropdownMenuProvider","contentId","useId","onOpenToggle","useCallback","prevOpen","TRIGGER_DEFAULT_TAG","Platform","OS","View","DropdownMenuTrigger","forwardRef","forwardedRef","as","triggerProps","context","composedTriggerRef","useComposedRefs","Anchor","_babelRuntimeHelpersEsmExtends","type","aria-haspopup","aria-expanded","undefined","aria-controls","data-state","ref","onMouseDown","composeEventHandlers","event","button","ctrlKey","onKeyDown","includes","key","preventDefault","DropdownMenuContent","onCloseAutoFocus","disableOutsidePointerEvents","disableOutsideScroll","portalled","contentProps","bottomSheetRef","handleSheetChanges","index","Content","id","style","--radix-dropdown-menu-content-transform-origin","trapFocus","_context$triggerRef$c","current","focus","onPointerDownOutside","_context$triggerRef$c2","contains","target","checkForDefaultPrevented","flex","Modal","animationType","transparent","visible","onRequestClose","_gorhomBottomSheet","animateOnMount","enablePanDownToClose","DropdownMenuGroup","extendPrimitive","MenuPrimitive","Group","displayName","DropdownMenuLabel","Label","DropdownMenuItem","Item","DropdownMenuCheckboxItem","CheckboxItem","DropdownMenuRadioGroup","RadioGroup","DropdownMenuRadioItem","RadioItem","DropdownMenuItemIndicator","ItemIndicator","DropdownMenuSeparator","Separator","DropdownMenuArrow","Arrow","Trigger"],"version":3,"file":"index.module.js.map"}