{"mappings":"maAgBA,MAOOA,EAAqBC,GAAyBC,EAP3B,sBAW1B,MAAMC,YAAiEC,IACrE,MAAMC,SAAEA,EAAFC,aAAYA,GAAiBF,GAC5BG,EAAMC,GAAWC,EAAMC,UAAS,GACjCC,EAAuBC,EAAeN,GAEtCO,EAAmBJ,EAAMK,aAC5BP,IACCC,EAAQD,GACRI,EAAqBJ,KAEvB,CAACI,iBAGH,OACEI,EAAAC,cAACC,EAAcC,KAAf,CAAoBX,KAAMA,EAAMD,aAAcO,gBAC5CE,EAAAC,cAACG,EAAD,CAAqBZ,KAAMA,EAAMD,aAAcO,GAC5CR,kBAYT,MACMe,EAAsC,QAAhBC,EAASC,GAAe,OAASC,SAQ7D,MAAMC,gCAAqBf,EAAMgB,YAAW,CAACrB,EAAOsB,KAClD,MAAMC,GAAEA,EAAKP,KAAwBQ,GAAiBxB,EAChDyB,EAAU5B,EAXG,sBAYb6B,EAAWrB,EAAMsB,OAAc,CAAEC,EAAG,EAAGC,EAAG,IAC1CC,EAAazB,EAAMsB,OAAO,CAC9BI,sBAAuB,IAAMC,QAAQC,SAAS,CAAEC,MAAO,EAAGC,OAAQ,KAAMT,EAASU,yBAGnF,OACEzB,EAAAC,cAAAD,EAAA0B,SAAA,kBACE1B,EAAAC,cAACC,EAAcyB,OAAf,CAAsBR,WAAYA,iBAClCnB,EAAAC,cAAC2B,EAADC,EAAA,GACMhB,EADN,CAEED,GAAIA,EACJkB,IAAKnB,EACLoB,cAAeC,EAAqB3C,EAAM0C,eAAgBE,IACxDA,EAAMC,iBACNnB,EAASU,QAAU,CAAER,EAAGgB,EAAME,QAASjB,EAAGe,EAAMG,SAChDtB,EAAQvB,cAAa,iCAmC/B,MAAM8C,gCAAqB3C,EAAMgB,YAAW,CAACrB,EAAOsB,KAClD,MAAM2B,4BAAEA,GAA8B,EAAhCC,OAAsCA,KAAWC,GAAiBnD,EAClEyB,EAAU5B,EAxBG,mCAyBnB,OACEc,EAAAC,cAACC,EAAcuC,QAAfZ,EAAA,GACMW,EADN,CAEEV,IAAKnB,EACL2B,8BAA6BxB,EAAQtB,MAAO8C,EAC5CI,MAAO,IACFrD,EAAMqD,MAETC,gDAA0D,wCAE5DC,WAAS,EACTC,sBAAoB,EACpBC,WAAS,EACTC,KAAK,SACLC,WAAYT,EACZU,MAAM,QACNC,YAAa,4BASnB,MAAMC,iBAAmBC,EAAgBC,EAAcC,MAAO,CAAEC,YAAa,4BAC7E,MAAMC,iBAAmBJ,EAAgBC,EAAcI,MAAO,CAAEF,YAAa,4BAC7E,MAAMG,gBAAkBN,EAAgBC,EAAcM,KAAM,CAAEJ,YAAa,2BAC3E,MAAMK,wBAA0BR,EAAgBC,EAAcQ,aAAc,CAC1EN,YAAa,mCAEf,MAAMO,sBAAwBV,EAAgBC,EAAcU,WAAY,CACtER,YAAa,iCAEf,MAAMS,qBAAuBZ,EAAgBC,EAAcY,UAAW,CACpEV,YAAa,gCAEf,MAAMW,yBAA2Bd,EAAgBC,EAAcc,cAAe,CAC5EZ,YAAa,oCAEf,MAAMa,qBAAuBhB,EAAgBC,EAAcgB,UAAW,CACpEd,YAAa,gCAKf,MAAMpD,KAAOf,mBACb,MAAMkF,QAAU7D,0BAChB,MAAMgC,QAAUJ,0BAChB,MAAMiB,MAAQH,wBACd,MAAMM,MAAQD,wBACd,MAAMG,KAAOD,uBACb,MAAMG,aAAeD,+BACrB,MAAMG,WAAaD,6BACnB,MAAMG,UAAYD,4BAClB,MAAMG,cAAgBD,gCACtB,MAAMG,UAAYD","sources":["./packages/react/context-menu/src/ContextMenu.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Platform, View } from 'react-native';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { createContext } from '@radix-ui/react-context';\nimport { Primitive, extendPrimitive } from '@radix-ui/react-primitive';\nimport * as MenuPrimitive from '@radix-ui/react-menu';\nimport { useCallbackRef } from '@radix-ui/react-use-callback-ref';\n\nimport type * as Polymorphic from '@radix-ui/react-polymorphic';\n\ntype Point = { x: number; y: number };\n\n/* -------------------------------------------------------------------------------------------------\n * ContextMenu\n * -----------------------------------------------------------------------------------------------*/\n\nconst CONTEXT_MENU_NAME = 'ContextMenu';\n\ntype ContextMenuContextValue = {\n  open: boolean;\n  onOpenChange(open: boolean): void;\n};\n\nconst [ContextMenuProvider, useContextMenuContext] = createContext<ContextMenuContextValue>(\n  CONTEXT_MENU_NAME\n);\n\nconst ContextMenu: React.FC<{ onOpenChange?(open: boolean): void }> = (props) => {\n  const { children, onOpenChange } = props;\n  const [open, setOpen] = React.useState(false);\n  const handleOpenChangeProp = useCallbackRef(onOpenChange);\n\n  const handleOpenChange = React.useCallback(\n    (open) => {\n      setOpen(open);\n      handleOpenChangeProp(open);\n    },\n    [handleOpenChangeProp]\n  );\n\n  return (\n    <MenuPrimitive.Root open={open} onOpenChange={handleOpenChange}>\n      <ContextMenuProvider open={open} onOpenChange={handleOpenChange}>\n        {children}\n      </ContextMenuProvider>\n    </MenuPrimitive.Root>\n  );\n};\n\nContextMenu.displayName = CONTEXT_MENU_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * ContextMenuTrigger\n * -----------------------------------------------------------------------------------------------*/\n\nconst TRIGGER_NAME = 'ContextMenuTrigger';\nconst TRIGGER_DEFAULT_TAG = Platform.OS === 'web' ? 'span' : View;\n\ntype ContextMenuTriggerOwnProps = Polymorphic.OwnProps<typeof Primitive>;\ntype ContextMenuTriggerPrimitive = Polymorphic.ForwardRefComponent<\n  typeof TRIGGER_DEFAULT_TAG,\n  ContextMenuTriggerOwnProps\n>;\n\nconst ContextMenuTrigger = React.forwardRef((props, forwardedRef) => {\n  const { as = TRIGGER_DEFAULT_TAG, ...triggerProps } = props;\n  const context = useContextMenuContext(TRIGGER_NAME);\n  const pointRef = React.useRef<Point>({ x: 0, y: 0 });\n  const virtualRef = React.useRef({\n    getBoundingClientRect: () => DOMRect.fromRect({ width: 0, height: 0, ...pointRef.current }),\n  });\n\n  return (\n    <>\n      <MenuPrimitive.Anchor virtualRef={virtualRef} />\n      <Primitive\n        {...triggerProps}\n        as={as}\n        ref={forwardedRef}\n        onContextMenu={composeEventHandlers(props.onContextMenu, (event) => {\n          event.preventDefault();\n          pointRef.current = { x: event.clientX, y: event.clientY };\n          context.onOpenChange(true);\n        })}\n      />\n    </>\n  );\n}) as ContextMenuTriggerPrimitive;\n\nContextMenuTrigger.displayName = TRIGGER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * ContextMenuContent\n * -----------------------------------------------------------------------------------------------*/\n\nconst CONTENT_NAME = 'ContextMenuContent';\n\ntype ContextMenuContentOwnProps = Polymorphic.Merge<\n  Omit<\n    Polymorphic.OwnProps<typeof MenuPrimitive.Content>,\n    | 'trapFocus'\n    | 'disableOutsideScroll'\n    | 'portalled'\n    | 'onOpenAutoFocus'\n    | 'side'\n    | 'sideOffset'\n    | 'align'\n    | 'alignOffset'\n  >,\n  { offset?: number }\n>;\n\ntype ContextMenuContentPrimitive = Polymorphic.ForwardRefComponent<\n  Polymorphic.IntrinsicElement<typeof MenuPrimitive.Content>,\n  ContextMenuContentOwnProps\n>;\n\nconst ContextMenuContent = React.forwardRef((props, forwardedRef) => {\n  const { disableOutsidePointerEvents = true, offset, ...contentProps } = props;\n  const context = useContextMenuContext(CONTENT_NAME);\n  return (\n    <MenuPrimitive.Content\n      {...contentProps}\n      ref={forwardedRef}\n      disableOutsidePointerEvents={context.open ? disableOutsidePointerEvents : false}\n      style={{\n        ...props.style,\n        // re-namespace exposed content custom property\n        ['--radix-context-menu-content-transform-origin' as any]: 'var(--radix-popper-transform-origin)',\n      }}\n      trapFocus\n      disableOutsideScroll\n      portalled\n      side=\"bottom\"\n      sideOffset={offset}\n      align=\"start\"\n      alignOffset={2}\n    />\n  );\n}) as ContextMenuContentPrimitive;\n\nContextMenuContent.displayName = CONTENT_NAME;\n\n/* ---------------------------------------------------------------------------------------------- */\n\nconst ContextMenuGroup = extendPrimitive(MenuPrimitive.Group, { displayName: 'ContextMenuGroup' });\nconst ContextMenuLabel = extendPrimitive(MenuPrimitive.Label, { displayName: 'ContextMenuLabel' });\nconst ContextMenuItem = extendPrimitive(MenuPrimitive.Item, { displayName: 'ContextMenuItem' });\nconst ContextMenuCheckboxItem = extendPrimitive(MenuPrimitive.CheckboxItem, {\n  displayName: 'ContextMenuCheckboxItem',\n});\nconst ContextMenuRadioGroup = extendPrimitive(MenuPrimitive.RadioGroup, {\n  displayName: 'ContextMenuRadioGroup',\n});\nconst ContextMenuRadioItem = extendPrimitive(MenuPrimitive.RadioItem, {\n  displayName: 'ContextMenuRadioItem',\n});\nconst ContextMenuItemIndicator = extendPrimitive(MenuPrimitive.ItemIndicator, {\n  displayName: 'ContextMenuItemIndicator',\n});\nconst ContextMenuSeparator = extendPrimitive(MenuPrimitive.Separator, {\n  displayName: 'ContextMenuSeparator',\n});\n\n/* -----------------------------------------------------------------------------------------------*/\n\nconst Root = ContextMenu;\nconst Trigger = ContextMenuTrigger;\nconst Content = ContextMenuContent;\nconst Group = ContextMenuGroup;\nconst Label = ContextMenuLabel;\nconst Item = ContextMenuItem;\nconst CheckboxItem = ContextMenuCheckboxItem;\nconst RadioGroup = ContextMenuRadioGroup;\nconst RadioItem = ContextMenuRadioItem;\nconst ItemIndicator = ContextMenuItemIndicator;\nconst Separator = ContextMenuSeparator;\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuGroup,\n  ContextMenuLabel,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioGroup,\n  ContextMenuRadioItem,\n  ContextMenuItemIndicator,\n  ContextMenuSeparator,\n  //\n  Root,\n  Trigger,\n  Content,\n  Group,\n  Label,\n  Item,\n  CheckboxItem,\n  RadioGroup,\n  RadioItem,\n  ItemIndicator,\n  Separator,\n};\nexport type { ContextMenuTriggerPrimitive, ContextMenuContentPrimitive };\n"],"names":["ContextMenuProvider","useContextMenuContext","createContext","ContextMenu","props","children","onOpenChange","open","setOpen","React","useState","handleOpenChangeProp","useCallbackRef","handleOpenChange","useCallback","_react","createElement","_radixUiReactMenu","Root","$b55f3d34bcc87b2d9b0bc87c90588a09$var$ContextMenuProvider","TRIGGER_DEFAULT_TAG","Platform","OS","View","ContextMenuTrigger","forwardRef","forwardedRef","as","triggerProps","context","pointRef","useRef","x","y","virtualRef","getBoundingClientRect","DOMRect","fromRect","width","height","current","Fragment","Anchor","Primitive","_babelRuntimeHelpersEsmExtends","ref","onContextMenu","composeEventHandlers","event","preventDefault","clientX","clientY","ContextMenuContent","disableOutsidePointerEvents","offset","contentProps","Content","style","--radix-context-menu-content-transform-origin","trapFocus","disableOutsideScroll","portalled","side","sideOffset","align","alignOffset","ContextMenuGroup","extendPrimitive","MenuPrimitive","Group","displayName","ContextMenuLabel","Label","ContextMenuItem","Item","ContextMenuCheckboxItem","CheckboxItem","ContextMenuRadioGroup","RadioGroup","ContextMenuRadioItem","RadioItem","ContextMenuItemIndicator","ItemIndicator","ContextMenuSeparator","Separator","Trigger"],"version":3,"file":"index.module.js.map"}